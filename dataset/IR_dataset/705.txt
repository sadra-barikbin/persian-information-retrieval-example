همچنین ببینید: Lazy evaluation

اسکیم ارزیابی تأخیر را پشتیبانی می‌کند در قالب delay و رویه force.<syntaxhighlight lang"scheme">
(define a 10)

(define eval-aplus2 (delay (+ a 2)))

(set! a 20)

(force eval-aplus2)

> 22

(define eval-aplus50 (delay (+ a 50)))

(let ((a 8))

 (force eval-aplus50))

> 70

(set! a 100)

(force eval-aplus2)

> 22

</syntaxhighlight>

متن نحوی تعریف اصلی از قول حفظ شده‌است، و ارزش آن نیز پس از استفاده از force حفظ شده‌است. قول تنها یکبار ارزیابی می‌شود. این نخستین‌ها، که مقادیر شناخته را یه عنوان قول تولید یا رسیدگی می‌کنند، می‌توانند برای ساختارهای پیاده‌سازی ارزیابی تنبل پیشرفته مانند جریان‌ها [۲۰] استفاده شوند. در استاندارد R6RS، این‌ها دیگر اولیه نیستند، اما در عوض، به عنوان بخشی از کتابخانه سازگاری R5RS (rnrs r5rs (6)) فراهم می‌شوند. در R5RS، یک پیاده‌سازی پیشنهاد شده از delay و force، پیاده‌سازی قول به عنوان یک رویه بدون آرگومان (یک تانک) و استفاده از یادداشت برداری برای اطمینان از این که تنها یکبار ارزیابی صورت گرفته‌است، صرف نظر از تعداد دفعاتی که force صدا زده می‌شودد (R5RS sec. 6.4).[3] داده می‌شود. SRFI 41 اصطلاح هر دوی دنباله‌های محدود و نامحدود را با صرفه جویی خارق‌العاده‌ای توانمند می‌کند. برای مثال، این یک تعریف از دنباله فیبوناچی با ساتفاده از توابع تعریف شده در SRFI 41:[20] است.<syntaxhighlight lang"scheme">
;; Define the Fibonacci sequence:

(define fibs

 (stream-cons 0

 (stream-cons 1

 (stream-map +

 fibs

 (stream-cdr fibs)))))

;; Compute the hundredth number in the sequence:

(stream-ref fibs 99)

> 218922995834555169026

</syntaxhighlight>