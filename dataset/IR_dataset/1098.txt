حفاظت

نکته مهمی که در طراحی هسته وجود دارد ، پشتیبانی در حمایت از خطا (تحمل گسل) و رفتارهای مخرب (امنیت) است. این دو جنبه معمولاً کاملاً مشخص نیستند و اتخاذ این تمایز در طراحی هسته منجر به رد یک ساختار سلسله مراتبی برای محافظت می شود.

مکانیسم ها یا خط مشی های ارائه شده توسط هسته با توجه به معیارهای مختلفی از جمله طبقه بندی می شوند: استاتیک (در زمان کامپایل) یا پویا (در زمان اجرا) اجرا می شود. پیشگیرانه یا پس از تشخیص. مطابق با اصول محافظت از آنها راضی (به عنوان مثال ، Denning). آیا آنها از سخت افزار پشتیبانی می شوند یا مبتنی بر زبان هستند. خواه آنها بیشتر یک مکانیسم باز باشند یا یک سیاست الزام آور. و خیلی بیشتر.

پشتیبانی از حوزه های حفاظت سلسله مراتبی معمولاً با استفاده از حالتهای CPU انجام می شود.

بسیاری از هسته ها اجرای "قابلیت ها" ، یعنی اشیایی را که به کد کاربر ارائه می شود امکان دسترسی محدود به یک شیء اساسی را که توسط هسته کنترل می شود فراهم می کنند. مثال متداول ، دست زدن به پرونده است: یک پرونده بازنمایی اطلاعات ذخیره شده در یک دستگاه ذخیره سازی دائمی است. هسته ممکن است قادر به انجام بسیاری از عملیات های مختلف ، از جمله خواندن ، نوشتن ، حذف یا اجرای آن باشد ، اما یک برنامه در سطح کاربر فقط ممکن است مجاز به انجام برخی از این عملیات ها باشد (به عنوان مثال ، فقط خواندن پرونده مجاز است). اجرای مشترک این امر این است که کرنل یک شیء را برای برنامه ارائه دهد (معمولاً به اصطلاح "دسته پرونده" نامیده می شود) و سپس برنامه می تواند عملیات را فراخوانی کند ، اعتبار آن در زمان درخواست عملیات هسته را بررسی می کند. چنین سیستمی ممکن است گسترش یابد تا تمام اشیاء هسته را مدیریت کند ، و در واقع به اشیاء ارائه شده توسط برنامه های کاربردی کاربر دیگر باشد.

یک روش کارآمد و ساده برای ارائه پشتیبانی سخت افزاری از قابلیتها ، واگذاری مسئولیت بررسی حقوق دسترسی برای هر دسترسی به حافظه ، مکانیزمی به نام آدرس دهی مبتنی بر قابلیت است. بیشتر معماری های رایانه های تجاری فاقد چنین پشتیبانی MMU برای قابلیت ها هستند.

یک روش جایگزین شبیه سازی قابلیت ها با استفاده از دامنه های سلسله مراتبی است که معمولاً پشتیبانی می شوند. در این روش ، هر شیء محافظت شده باید در یک فضای آدرس قرار بگیرد که برنامه به آن دسترسی ندارد. هسته همچنین لیستی از قابلیتهای موجود در چنین حافظه ای را حفظ می کند. هنگامی که یک برنامه کاربردی باید به یک شیء محافظت شده توسط یک قابلیت دسترسی داشته باشد ، تماس تلفنی سیستم را انجام می دهد و هسته بررسی می کند که آیا توانایی برنامه به شما اجازه می دهد تا عملکرد درخواست شده را انجام دهد یا خیر ، اگر اجازه داشته باشد دسترسی به آن را انجام می دهد (یا مستقیم ، یا با ارسال درخواست به یک فرآیند سطح کاربر دیگر). هزینه عملکرد تعویض فضای آدرس ، عملی بودن این روش را در سیستمهایی با تعامل پیچیده بین اشیاء محدود می کند ، اما در سیستم عامل های فعلی برای اشیاء که به طور مکرر قابل دسترسی نیستند یا از آنها انتظار نمی رود که به سرعت انجام شوند ، استفاده می شود.

اگر سیستم عامل از مکانیزم های محافظت پشتیبانی نمی کند ، می توان محافظت را در سطح بالاتری شبیه سازی کرد ، به عنوان مثال با شبیه سازی قابلیت ها با دستکاری جداول صفحه ، اما پیامدهای عملکردی نیز وجود دارد. با وجود این ، عدم وجود پشتیبانی سخت افزاری ممکن است برای سیستم هایی که تصمیم به استفاده از محافظت مبتنی بر زبان دارند ، مسئله ای نباشد.

تصمیم مهم در مورد طراحی هسته ، انتخاب سطوح انتزاعی است که مکانیسم ها و سیاست های امنیتی باید در آن اعمال شود. مکانیسم های امنیتی هسته نقش اساسی در حمایت از امنیت در سطوح بالاتر دارند.

یک رویکرد استفاده از سیستم عامل و پشتیبانی هسته برای تحمل خطا است (ایجاد بالا) و ایجاد سیاست امنیتی برای رفتارهای مخرب در بالا از آن (اضافه کردن ویژگی هایی مانند مکانیزم های رمزنگاری در صورت لزوم) ، واگذاری برخی مسئولیت ها به کامپایلر. رویکردهایی که اجرای سیاستهای امنیتی را به کامپایلر و / یا سطح برنامه واگذار می کنند ، معمولاً امنیت مبتنی بر زبان نامیده می شوند.

فقدان بسیاری از سازوکارهای مهم امنیتی در سیستم های عامل اصلی فعلی مانع از اجرای سیاست های امنیتی کافی در سطح انتزاع برنامه می شود. در حقیقت ، یک تصور غلط رایج در امنیت رایانه این است که هرگونه سیاست امنیتی بدون در نظر گرفتن پشتیبانی از هسته می تواند در یک برنامه اجرا شود.

محافظت از سخت افزار یا مبتنی بر زبان

امروزه سیستم های رایانه ای معمولی درباره قوانین برنامه مجاز به دسترسی به داده ها از قوانینی که به سخت افزار اعمال شده استفاده می کنند. پردازنده بر اجرای آن نظارت می کند و برنامه ای را که نقض یک قانون است ، متوقف می کند ، مانند یک فرآیند کاربری که سعی در نوشتن آن به حافظه هسته دارد. در سیستم هایی که فاقد پشتیبانی از قابلیت ها هستند ، فرایندها با استفاده از فضاهای آدرس جداگانه از یکدیگر جدا می شوند. تماس با استفاده از فرآیندهای کاربر به درون هسته تنظیم می شود و آنها را ملزم به استفاده از یکی از روش های تماس سیستم فوق بیان می کند.

یک روش جایگزین استفاده از حفاظت مبتنی بر زبان است. در سیستم حفاظت مبتنی بر زبان ، هسته فقط اجازه اجرای کد را می دهد که توسط یک کامپایلر زبان قابل اعتماد تولید شده است. سپس زبان ممکن است به گونه ای طراحی شده باشد که غیرممکن باشد که برنامه نویس بتواند دستور دهد کاری را انجام دهد که یک مورد امنیتی را نقض کند.

مزایای این رویکرد شامل موارد زیر است:

* نیازی به فضای آدرس جداگانه نیست. جابجایی بین فضاهای آدرس عملیاتی کند است که باعث سربار زیاد می شود و در حال حاضر کارهای بهینه سازی زیادی انجام می شود تا از سوئیچ های غیر ضروری در سیستم عامل های فعلی جلوگیری شود. سوئیچینگ در یک سیستم محافظتی مبتنی بر زبان کاملاً غیر ضروری است ، زیرا همه کد ها می توانند با خیال راحت در همان فضای آدرس کار کنند.
* انعطاف پذیری هر طرح محافظتی که می تواند از طریق یک زبان برنامه نویسی بیان شود ، می تواند با استفاده از این روش عملی شود. تغییرات در طرح حفاظت (به عنوان مثال از یک سیستم سلسله مراتبی به سیستم مبتنی بر قابلیت) نیازی به سخت افزار جدید ندارد.

معایب عبارتند از:

* زمان راه اندازی برنامه طولانی تر. برنامه ها باید هنگام شروع تأیید شوند تا اطمینان حاصل شود که توسط کامپایلر صحیح کامپایل شده اند ، یا ممکن است نیاز به بازپرداخت یا از کد منبع و یا از طریق کد دیگر باشد.
* سیستم های نوع انعطاف پذیر. در سیستم های سنتی ، برنامه های کاربردی اغلب کارهایی انجام می دهند که از نوع بی خطر نیستند. چنین عملیاتی در سیستم حفاظت مبتنی بر زبان مجاز نیست ، به این معنی که برنامه ها ممکن است نیاز به بازنویسی داشته باشند و در برخی موارد ممکن است عملکرد خود را از دست دهند.

نمونه هایی از سیستم های دارای محافظت مبتنی بر زبان شامل JX و Singularity مایکروسافت است.